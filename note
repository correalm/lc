Pointers:

-> malloc retorna por default um pointer void (void *). Type cast quando preciso reservar memória para
   um tipo custom. (TypeName *) malloc(sizeof(TypeName))

   OBS: C++ esse tipo de conversão explícita não é necessária. C é uma boa prática.
-----
Deal with directories:

- Use POSIX (dirent.h) -> Directory Operations
  - Web: https://pubs.opengroup.org/onlinepubs/9699919799/

- scandir (can be useful): http://www.map.uefs.br/dirent.html#scandir
---
Deal with files:

- use fgets
  - https://pubs.opengroup.org/onlinepubs/9699919799/

----
Strings

full_path tem de ser grande o suficiente para suportar uma entrada do tamanho de (path * 2)

  path (valor default = ".") + d_name (current dir name) -> por isso path * 2

- snprintf -> escreve no destino a string formatada pelo formatador.
    snprintf(dest, size[size of resultant string],  format[formatador], sources)

----

C references

https://code-reference.com/c/stdio.h/snprintf
---

need find a way to deal with custom paths. How build the string to them?
extract the function to be able to do recusrion. Need more study on this things...
extract the funtcion to open and read file (the read_flie function returns the amount of lines?! fuck, this is wrong)
see a better way to deal with cli arguments
  - how accept -X args?
  - deal with file extensions

see memory with more details
  - pointers
  - references
  - pass pointer or reference?
  - how i now the size of variables like "path" and "full_path"?

see error treatment with more details
  - what to do when an error occur?
  - how ensure memory safe?

BIG QUESTION: is this litte program memory safe?


----
STEPS:

[X] List current dir;
[X] Open files separated from other dir;
[]  Open subdirs recursively;
[X] Open file;
[X] Read file;
[X] Read each line from file
[X]  Count the line number
[]  Read each word on file
[] 
